// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Label instruction parts
        Or16(a=instruction, b=false, out[15]=instC, out[13..14]=reserved,
             out[12]=MorA, out[11]=zx, out[10]=nx, out[9]=zy, out[8]=ny, out[7]=f,
             out[6]=no, out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3);

        Not(in=instC, out=instA);

        //Set up load bits for registers A, D and M
        Or(a=instA, b=d1, out=loadA);
        And(a=instC, b=d2, out=loadD);
        And(a=instC, b=d3, out=writeM);

        DRegister(in=ALUout, load=loadD, out=D);
        ARegister(in=inputA, load=loadA, out=A, out[0..14]=addressM);
        Mux16(a=A, b=inM, sel=MorA, out=y);     //the second input for the ALU
        Mux16(a=instruction, b=ALUout, sel=instC, out=inputA);

        ALU(x=D, y=y, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=ALUout, zr=zr, zr=jeq, ng=ng);

        //Set up the program counter
        Not(in=zr, out=notzr, out=jne);
        Not(in=ng, out=notng);
        And(a=notng, b=notzr, out=jgt);
        And(a=ng, b=notzr, out=jlt);
        Not(in=jgt, out=jle);
        Not(in=jlt, out=jge);
        Mux(a=false, b=jgt, sel=j3, out=mux1Out);
        Mux(a=jeq, b=jge, sel=j3, out=mux2Out);
        Mux(a=jlt, b=jne, sel=j3, out=mux3Out);
        Mux(a=jle, b=true, sel=j3, out=mux4Out);
        Mux(a=mux1Out, b=mux2Out, sel=j2, out=mux5Out);
        Mux(a=mux3Out, b=mux4Out, sel=j2, out=mux6Out);
        Mux(a=mux5Out, b=mux6Out, sel=j1, out=jmpCnd);
        And(a=jmpCnd, b=instC, out=jmp);
        Not(in=jmpCnd, out=notJmpCnd);
        Or(a=instA, b=notJmpCnd, out=inc);
        PC(in=A, reset=reset, load=jmp, inc=inc, out[0..14]=pc);
}
